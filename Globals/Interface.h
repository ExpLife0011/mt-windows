#pragma once

// HID vendor ID:
#define OCUHID_VENDOR_ID				0xF182

// OcuHID Product ID
#define OCUHID_EMULATED_DEVICE			0x1000

// HID Interface
#define OCUHID_INTERFACE_VERSION		1

// Maximum simaltaneous touch report count
#define MAX_TOUCHREPORT_COUNT			2

// Report identifiers:
enum
{
	REPORTID_FINGERS = 1,
	REPORTID_MAXIMUMCOUNT,
	REPORTID_FEATURE,
	REPORTID_MOUSE,
	REPORTID_SYNTHESIZE,
	REPORTID_RESETTOUCHSTATE,
	REPORTID_RESETMOUSESTATE,
	REPORTID_NULL
};

// This is the mode of operation that the HidEmulator is going to operate in.
// These modes are documented in MSDN, but their operating mode is pretty straightforward:
//
// The mouse input mode means that the device will be treated like a mouse with a continuous
// presence on screen.  Signalling may be differential or absolute (but is typically absolute).
// Mouse input mode also means that the mouse report descriptor is used, instead of the touch
// descriptor.
//
// The single touch input mode means that only one contact point is interpreted, and the other
// inputs will be ignored.  Otherwise it functions the same as multitouch.
//
// In mulititouch mode, full multitouch capabilities are available.  More than one contact is
// supported, as long as each contact has its own contact identifier.
enum DevInMode
{
	MODE_MOUSE,
	MODE_SINGLE_TOUCH,
	MODE_MULTI_TOUCH
};

#pragma pack(push, 1)

/// <summary>
/// Feature report header, included as a base class in feature reporting
/// types.  This choice allows feature reports to be written to directly
/// without clobbering the ReportID, which is required for the OS to process
/// the feature report correctly.
/// </summary>
struct HID_INPUT_REPORT
{
	UCHAR ReportID;
};

/// <summary>
/// Report used to describe the maximum number of contact points this device supports
/// </summary>
struct HID_MAXIMUM_COUNT:
	HID_INPUT_REPORT
{
	UCHAR MaxCount;
	UCHAR DeviceIndex;
};

/// <summary>
/// Report used to assign the input mode or, optionally, query the current input mode
/// </summary>
struct HID_INPUT_MODE:
	HID_INPUT_REPORT
{
	UCHAR InputMode;
	UCHAR DeviceIndex;
};

// Logical maximum for finger report.  The logical maximum is used to refer to the domain of report coordinates.
#define FINGER_REPORT_LMAX 4095

/// <summary>
/// A finger report.  This is a single discrete input event, describing an atomic state of a single finger.
/// </summary>
union HID_FINGER_REPORT
{
	struct
	{
		unsigned TipSwitch:1;
		unsigned InRange:1;
		unsigned Reserved2:6;
	};
	struct
	{
		UCHAR  bStatus;
		UCHAR  bContactId;
		USHORT cxData;
		USHORT cyData;
		USHORT wXData;
		USHORT wYData;
	};
};

/// <summary>
/// This is a full gesture report.  It includes a report identifier and up to MAX_TOUCHREPORT_COUNT
/// touch reports.
/// </summary>
struct HID_GESTURE_REPORT:
	HID_INPUT_REPORT
{
	// The actual contact structures
	HID_FINGER_REPORT contacts[MAX_TOUCHREPORT_COUNT];

	// The actual number of inputs in the contacts structure
	UCHAR ActualInputs;
};

// Assert some properties about the gesture report:
static_assert( (long long)(char*)&((HID_FINGER_REPORT*)0)->cxData == 2ULL, "Offsets incorrect for the HID gesture report." );

// The logical maximum of mouse report payload
#define MOUSE_REPORT_LMAX 32767

/// <summary>
/// The mouse report structure, for use when the device input mode is set to mouse
/// </summary>
struct HID_MOUSE_REPORT:
	HID_INPUT_REPORT
{
	union
	{
		struct
		{
			// Left mouse button
			unsigned Button1:1;

			// Right mouse button
			unsigned Button2:1;

			// Ignored, set to zero
			unsigned Reserved:6;
		};
		struct
		{
			// Flags, corresponding to the first structure in this union
			BYTE Flags;
			WORD x;
			WORD y;
		};
	};
};

/// <summary>
/// This is used when the report is REPORTID_RESETTOUCHSTATE.  It indicates
/// the contact ID of the touch input to be reset.  Up to MAX_TOUCHREPORT_COUNT
/// may be sent at once.
/// </summary>
struct HID_RESET_REPORT
{
	UCHAR ResetContactID[MAX_TOUCHREPORT_COUNT];
	UCHAR ActualInputs;
};

// Validate position:
static_assert( (long long)(char*)&((HID_MOUSE_REPORT*)0)->x == 2ULL, "Incorrect offset in mouse report descriptor" );

/// <summary>
/// Synthesis report.  The synthesis report is an omnibus structure that includes a report identifier and all
/// of the possible reports that may either be generated by the HID emulator.
/// </summary>
struct HID_SYNTEHSIZE_REPORT:
	HID_INPUT_REPORT
{
	union
	{
		UCHAR SynthesizedReportID;

		HID_GESTURE_REPORT GestureReport;
		HID_MOUSE_REPORT MouseReport;
		HID_RESET_REPORT ResetReport;

		// This field is not used directly; rather, its presence here is to ensure that the length
		// of the parent structure is 64 bytes.
		UCHAR RawInput[64];
	};
};

#pragma pack(pop)